name: rust

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
jobs:
  version:
    runs-on: ubuntu-20.04
    outputs:
      ve: ${{ steps.v.outputs.ve }}
      u: ${{ steps.v.outputs.u }}
      buildVve: ${{ steps.buildV.outputs.ve }}
      buildVu: ${{ steps.buildV.outputs.u }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Checkout Runtime
        run: |
          git clone https://gist.github.com/inkroom/501548078a930c6f3bd98ea257409648 runtime
      - name: Fetch Latest Version
        id: v
        run: |
          ve=$(docker run  --rm  rust:slim-buster rustc --version)
          if [[ $ve == "null" ]]
          then 
            echo "暂无最新版本"
            echo "u=false" >> $GITHUB_OUTPUT
          fi
          d=$(docker run --rm ghcr.io/${{ github.repository_owner }}/rust:latest rustc --version || echo "null")
          echo "docker version=$d"
          echo "latest version=$ve"
          if [[ "$d" =~ "$ve"  ]]; then
            echo "已是最新版本"
            echo "u=false" >> $GITHUB_OUTPUT
          else 
            ve=$(echo $ve | awk '{split($0,arr);print arr[2]}')
            echo "最新版本 $ve"
            echo "u=true" >> $GITHUB_OUTPUT
            echo "ve=$ve" >> $GITHUB_OUTPUT
          fi
      - name: Rust Build Latest Version
        id: buildV
        run: |
          ve=$(docker run --rm registry.gitlab.com/rust_musl_docker/image:stable-latest rustc --version)
          ve=$(echo $ve | awk '{split($0,arr);print arr[2]}')
          if [[ $ve == "null" ]]
          then 
            echo "暂无最新版本"
            echo "u=false" >> $GITHUB_OUTPUT
          fi
          d=$(docker run --rm ghcr.io/${{ github.repository_owner }}/rust_musl_build:latest rustc --version || echo "null")
          d=$(echo $d | awk '{split($0,arr);print arr[2]}')
          echo "docker version=$d"
          echo "latest version=$ve"
          if [[ "$d" =~ "$ve"  ]]; then
            echo "已是最新版本"
            echo "u=false" >> $GITHUB_OUTPUT
          else 
            echo "最新版本 $ve"
            echo "u=true" >> $GITHUB_OUTPUT
            echo "ve=$ve" >> $GITHUB_OUTPUT
          fi
  musl:
    runs-on: ubuntu-20.04
    needs: [version]
    if: needs.version.outputs.buildVu == 'true'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push musl Image
        run: |
          docker pull registry.gitlab.com/rust_musl_docker/image:stable-latest
          docker tag registry.gitlab.com/rust_musl_docker/image:stable-latest ghcr.io/${{ github.repository_owner }}/rust_musl_build:latest
          docker tag registry.gitlab.com/rust_musl_docker/image:stable-latest ghcr.io/${{ github.repository_owner }}/rust_musl_build:${{  needs.version.outputs.buildVve }}
          docker push ghcr.io/${{ github.repository_owner }}/rust_musl_build:latest
          docker push ghcr.io/${{ github.repository_owner }}/rust_musl_build:${{  needs.version.outputs.buildVve }}
  dev:
    runs-on: ubuntu-20.04
    permissions: write-all
    needs: [version]
    if: needs.version.outputs.u == 'true'
    strategy:
      matrix:
        platform: [linux/386, linux/amd64, linux/arm/v7, linux/arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Checkout Runtime
        run: |
          git clone https://gist.github.com/inkroom/501548078a930c6f3bd98ea257409648 runtime
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to the Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Arch
        id: arch
        run: |
          arch=$(echo ${{ matrix.platform }} | awk '{b=gensub(/linux\//,"",1,$0);b=gensub(/\//,"-","g",b); print b}')
          echo "arch=$arch" >> $GITHUB_OUTPUT
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/rust
            ${{ secrets.DOCKER_HUB_USERNAME }}/rust
          tags: |
            type=raw,value=${{ steps.arch.outputs.arch }}
          labels: |
            org.opencontainers.image.description=rust开发环境-${{ steps.arch.outputs.arch }}
            org.opencontainers.image.title=rust-${{ steps.arch.outputs.arch }}
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: runtime
          file: runtime/Dockerfile.rust
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-args: |
            RUST_VERSION=${{ needs.version.outputs.ve }}
  manifest:
    runs-on: ubuntu-20.04
    permissions: write-all
    needs: [version, dev]
    # 直接push  会导致 新推送覆盖旧推送，所以只能分开推送到不同tag，最后才采取合并
    if: needs.version.outputs.u == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to the Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Create Manifest
        run: |
          docker manifest create --insecure ghcr.io/${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} ghcr.io/${{ github.repository_owner }}/rust:amd64 ghcr.io/${{ github.repository_owner }}/rust:386 ghcr.io/${{ github.repository_owner }}/rust:arm-v7 ghcr.io/${{ github.repository_owner }}/rust:arm64
          
          docker manifest annotate  ghcr.io/${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} ghcr.io/${{ github.repository_owner }}/rust:amd64 --os linux --arch amd64 
          docker manifest annotate  ghcr.io/${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} ghcr.io/${{ github.repository_owner }}/rust:386 --os linux --arch 386
          docker manifest annotate  ghcr.io/${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} ghcr.io/${{ github.repository_owner }}/rust:arm-v7 --os linux --arch arm --variant v7
          docker manifest annotate  ghcr.io/${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} ghcr.io/${{ github.repository_owner }}/rust:arm64 --os linux --arch arm64

          docker manifest push --insecure ghcr.io/${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }}
          
                 
          docker manifest create --insecure ${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} ${{ github.repository_owner }}/rust:amd64 ${{ github.repository_owner }}/rust:386 ${{ github.repository_owner }}/rust:arm-v7 ${{ github.repository_owner }}/rust:arm64
     
          docker manifest annotate  ${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} ${{ github.repository_owner }}/rust:amd64 --os linux --arch amd64 
          docker manifest annotate  ${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} ${{ github.repository_owner }}/rust:386 --os linux --arch 386
          docker manifest annotate  ${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} ${{ github.repository_owner }}/rust:arm-v7 --os linux --arch arm --variant v7
          docker manifest annotate  ${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} ${{ github.repository_owner }}/rust:arm64 --os linux --arch arm64

          docker manifest push --insecure ${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }}
          
          
