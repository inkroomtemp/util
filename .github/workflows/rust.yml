name: rust

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    paths:
      - '.github/workflows/rust.yml'
    branches:
      - master
  workflow_dispatch:
jobs:
  version:
    runs-on: ubuntu-20.04
    outputs:
      ve: ${{ steps.v.outputs.ve }}
      u: ${{ steps.v.outputs.u }}
      buildVve: ${{ steps.buildV.outputs.ve }}
      buildVu: ${{ steps.buildV.outputs.u }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Checkout Runtime
        run: |
          git clone https://gist.github.com/inkroom/501548078a930c6f3bd98ea257409648 runtime
      - name: Fetch Latest Version
        id: v
        run: |
          ve=$(docker run  --rm  rust:slim-buster rustc --version)
          if [[ $ve == "null" ]]
          then 
            echo "暂无最新版本"
            echo "u=false" >> $GITHUB_OUTPUT
          fi
          d=$(docker run --rm ghcr.io/${{ github.repository_owner }}/rust:latest rustc --version || echo "rustc null")
          echo "docker version=$d"
          echo "latest version=$ve"
          ve=$(echo $ve | awk '{print $2}')
          d=$(echo $d | awk '{print $2}')
          echo "ve=$ve" >> $GITHUB_OUTPUT
          if [[ "$d" =~ "$ve"  ]]; then
            echo "已是最新版本"
            echo "u=false" >> $GITHUB_OUTPUT
          else 
            echo "最新版本 $ve"
            echo "u=true" >> $GITHUB_OUTPUT
          fi
      - name: Rust Build Latest Version
        id: buildV
        run: | 
          d=$(docker run --rm ghcr.io/${{ github.repository_owner }}/rust_musl_build:latest rustc --version || echo "rustc null")
          d=$(echo $d | awk '{print $2}')
          if [[ $d == "null" ]]
          then 
            echo "暂无最新版本"
            echo "ve=${{ steps.v.outputs.ve }}" >> $GITHUB_OUTPUT
            echo "u=false" >> $GITHUB_OUTPUT
          fi
          echo "docker version=$d"
          echo "latest version=${{ steps.v.outputs.ve }}"
          echo "ve=$d" >> $GITHUB_OUTPUT
          if [[ "$d" =~ "${{ steps.v.outputs.ve }}"  ]]; then
            echo "已是最新版本 $ve"
            echo "u=false" >> $GITHUB_OUTPUT
          else 
            echo "最新版本 $ve"
            echo "u=true" >> $GITHUB_OUTPUT
          fi
  arch: 
    runs-on: ubuntu-20.04
    needs: [version]
    if: needs.version.outputs.buildVu == 'true' ||  needs.version.outputs.u == 'true'
    outputs:
      dev_arch: ${{ steps.arch.outputs.dev_arch }}
      musl_arch: ${{ steps.arch.outputs.musl_arch }}
    steps:
      - name: arch
        id: arch
        run: |
          dev_arch=$(curl -sL https://hub.docker.com/v2/namespaces/library/repositories/rust/tags/${{ needs.version.outputs.ve }}-slim-bullseye | jq -c '[.images[] | select(.architecture!="unknown") | select (.architecture!="ppc64le") | select(.os!="unknown") | .os + "/" + .architecture]')
          echo "dev_arch=$dev_arch"
          musl_arch=$(curl -sL https://hub.docker.com/v2/namespaces/library/repositories/debian/tags/buster | jq -c '[.images[] | select(.architecture!="unknown") | select(.architecture!="386") | select(.architecture!="arm") | select(.os!="unknown") | .os + "/" + .architecture]')
          echo "musl_arch=$musl_arch"
          echo "dev_arch=$dev_arch" >> $GITHUB_OUTPUT
          echo "musl_arch=$musl_arch" >> $GITHUB_OUTPUT

  musl:
    runs-on: ubuntu-20.04
    needs: [version, arch]
    strategy:
      matrix:
        platform: ${{ fromJSON( needs.arch.outputs.musl_arch ) }}
    if: needs.version.outputs.buildVu == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build musl Image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          file: rust/Dockerfile.musl
          outputs: type=image,name=ghcr.io/${{ github.repository_owner }}/rust,push-by-digest=true,name-canonical=true,push=true
          platforms: ${{ matrix.platform }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-args: |
            RUST_VERSION=${{ needs.version.outputs.ve }}
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: musl-digests-${{ matrix.platform }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  musl-combile:
    runs-on: ubuntu-20.04
    permissions: write-all
    needs: [musl]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: musl-digests-*
          path: /tmp/digests
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test musl Image
        uses: docker/build-push-action@v5
        with:
          context: rust
          file: rust/Dockerfile.test
          push: false
          load: false
          platforms: |
            linux/amd64
            linux/arm/v7
            linux/arm64
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-args: |
            IMAGE=ghcr.io/${{ github.repository_owner }}/rust_musl_build:latest
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          tree /tmp/digests
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") $(printf 'ghcr.io/${{ github.repository_owner }}/rust_musl_build@sha256:%s ' *)
          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository_owner }}/rust_musl_build:latest \
            ghcr.io/${{ github.repository_owner }}/rust_musl_build:${{ needs.version.outputs.ve }}

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/rust_musl_build:${{ needs.version.outputs.ve }}

  dev:
    runs-on: ubuntu-20.04
    permissions: write-all
    needs: [version, arch]
    if: needs.version.outputs.u == 'true'
    strategy:
      matrix:
        platform: ${{ fromJSON( needs.arch.outputs.dev_arch ) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Checkout Runtime
        run: |
          git clone https://gist.github.com/inkroom/501548078a930c6f3bd98ea257409648 runtime
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to the Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Arch
        id: arch
        run: |
          arch=${{ matrix.platform }}
          echo "arch=${arch//\//-}" >> $GITHUB_OUTPUT
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/rust
          tags: |
            type=raw,value=${{ needs.version.outputs.ve }}
          labels: |
            org.opencontainers.image.description=rust开发环境-${{ needs.version.outputs.ve }}
            org.opencontainers.image.title=rust-${{ needs.version.outputs.ve }}
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: runtime
          file: runtime/Dockerfile.rust
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ secrets.DOCKER_HUB_USERNAME }}/rust,push-by-digest=true,name-canonical=true,push=true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-args: |
            RUST_VERSION=${{ needs.version.outputs.ve }}
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.arch.outputs.arch }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  combine:
    runs-on: ubuntu-20.04
    permissions: write-all
    needs: [version, dev]
    # 使用 manifest 合并会报  is a manifest list  可能跟qemu buildx 有关，所以换种方案
    if: needs.version.outputs.u == 'true'
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-*
          path: /tmp/digests
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/rust
          tags: |
            type=raw,value=${{ needs.version.outputs.ve }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.description=rust开发环境-${{ needs.version.outputs.ve }}
            org.opencontainers.image.title=rust-${{ needs.version.outputs.ve }}
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          tree /tmp/digests
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") $(printf '${{ secrets.DOCKER_HUB_USERNAME }}/rust@sha256:%s ' *)
          echo "-------------ghcr-----------"
          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository_owner }}/rust:latest \
            --tag ghcr.io/${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }} \
            ${{ secrets.DOCKER_HUB_USERNAME }}/rust:${{ needs.version.outputs.ve }}

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ secrets.DOCKER_HUB_USERNAME }}/rust:${{ needs.version.outputs.ve }}
          echo "------------------------"
          docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/rust:${{ needs.version.outputs.ve }}
